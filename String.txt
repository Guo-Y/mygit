String类

         1、String对象的初始化

由于String对象特别常用，所以在对String对象进行初始化时，Java提供了一种简化的特殊语法，格式如下：
                            String s = “abc”;

                            s = “Java语言”;

                   其实按照面向对象的标准语法，其格式应该为：

                            String s = new String(“abc”);

                            s = new String(“Java语言”);

只是按照面向对象的标准语法，在内存使用上存在比较大的浪费。例如String s = new String(“abc”);
实际上创建了两个String对象，一个是”abc”对象，存储在常量空间中，一个是使用new关键字为对象s申请的空间。
其它的构造方法的参数，可以参看String类的API文档。

         

                   b、

                   c、concat方法

该方法的作用是进行字符串的连接，将两个字符串连接以后形成一个新的字符串。例如：
                                     String s = “abc”;

                                     String s1 = “def”;

                                     String s2 = s.concat(s1);

则连接以后生成的新字符串s2的值是”abcdef”，而字符串s和s1的值不发生改变。如果需要连接多个字符串，可以使用如下方法：
                                     String s = “abc”;

                                     String s1 = “def”;

                                     String s2 = “1234”;

         String s3 = s.concat(s1).concat(s2);
则生成的新字符串s3的值为”abcdef1234”。
其实在实际使用时，语法上提供了一种更简单的形式，就是使用“+”进行字符串的连接。例如：
         String s = “abc” + “1234”;
则字符串s的值是”abc1234”，这样书写更加简单直观。
而且使用“+”进行连接，不仅可以连接字符串，也可以连接其他类型。但是要求进行连接时至少有一个参与连接的内容是字符串类型。
而且“+”匹配的顺序是从左向右，如果两边连接的内容都是基本数字类型则按照加法运算，
如果参与连接的内容有一个是字符串才按照字符串进行连接。
例如：
         int a = 10;
         String s = “123” + a + 5;
则连接以后字符串s的值是“123105”，计算的过程为首先连接字符串”123”和变量a的值，生成字符串”12310”，然后使用该字符串再和数字5进行连接生成最终的结果。
而如下代码：
         int a = 10;
         String s = a + 5 + “123”;
则连接以后字符串s的值是”15123”，计算的过程为首先计算a和数字5，由于都是数字型则进行加法运算或者数字值15，然后再使用数字值15和字符串”123”进行连接获得最终的结果。
而下面的连接代码是错误的：
         int a = 12;
         String s = a + 5 + ‘s’;
因为参与连接的没有一个字符串，则计算出来的结果是数字值，在赋值时无法将一个数字值赋值给字符串s。

                
                   p、valueOf方法

该方法的作用是将其它类型的数据转换为字符串类型。需要注意的是，基本数据和字符串对象之间不能使用以前的强制类型转换的语法进行转换。
另外，由于该方法是static方法，所以不用创建String类型的对象即可。例如：
         int n = 10;
         String s = String.valueOf(n);
则字符串s的值是”10”。虽然对于程序员来说，没有发生什么变化，但是对于程序来说，数据的类型却发生了变化。
介绍一个简单的应用，判断一个自然数是几位数字的逻辑代码如下：
         int n = 12345;
         String s = String.valueOf(n);
         int len = s.length();
则这里字符串的长度len，就代表该自然数的位数。这种判断比数学判断方法在逻辑上要简单一些。